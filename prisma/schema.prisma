// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  emailVerified       DateTime?
  password            String
  firstName           String?
  lastName            String?
  username            String             @unique
  phoneNumber         String?            @unique
  avatar              String?
  backgroundImage     String?
  bio                 String?            @db.Text
  quote               String?            @db.Text
  designation         String?
  country             String?
  city                String?
  role                Role               @default(USER)
  isVerified          Boolean            @default(false)
  isPhoneVerified     Boolean            @default(false)
  phoneOtp            String?            @unique
  lastLogin           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  personalInterests   String[]           @default([])
  topSkills           String[]           @default([])
  linkPreferences     String[]           @default([])
  lookingFor          String[]           @default([])
  topInterests        String[]           @default([])
  currentProjects     String[]           @default([])
  isSubscribed        Boolean            @default(false)
  subscriptionEndDate DateTime?
  subscriptionTier    SubscriptionTier   @default(FREE)
  subscription        Subscription?
  isProfileComplete   Boolean            @default(false)
  badges              Badge[]
  collaborations      Collaboration[]
  endorsements        Endorsement[]
  endorsementsGiven   Endorsement[]      @relation("EndorsementGiver")
  posts               Post[]
  liveLinks           LiveLink[]
  reviews             Review[]
  LiveLinkAttendee    LiveLinkAttendee[]
  sentConnections     UserConnection[]   @relation("Connector")
  receivedConnections UserConnection[]   @relation("Connected")
  sentMessages     Message[]
  receivedMessages Message[] @relation("MessageRecipient")
  userOneChats     Chat[]    @relation("UserOneChats")
  userTwoChats     Chat[]    @relation("UserTwoChats")
  likedPosts       Post[]    @relation("PostLikes")
  repostedPosts    Post[]    @relation("PostReposts")
  comments         Comment[]
  transactions     Transaction[]
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionTier {
  FREE
  PRO
  
}

model Subscription {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  tier            SubscriptionTier
  startDate       DateTime         @default(now())
  endDate         DateTime
  autoRenew       Boolean          @default(true)
  paymentStatus   String
  lastPaymentDate DateTime?
  amount          Float
  paystackRef     String?          @unique
  paystackSubscriptionCode String? @unique
  nextPaymentDate          DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Badge {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collaboration {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Endorsement {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  giverId     String
  giver       User     @relation("EndorsementGiver", fields: [giverId], references: [id])
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  image     String?
  mentions  String[]
  likes     Int      @default(0)
  comments  Int      @default(0)
  reposts   Int      @default(0)
  shares    Int      @default(0)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  likedBy   User[]   @relation("PostLikes")
  repostedBy User[]  @relation("PostReposts")
  postComments Comment[]
}

model LiveLink {
  id           String             @id @default(cuid())
  title        String
  description  String             @db.Text
  date         DateTime           @db.Timestamptz
  startDate    DateTime           @db.Timestamptz
  endDate      DateTime           @db.Timestamptz
  location     String?
  maxAttendees Int?
  isPublic     Boolean            @default(false)
  status       LiveLinkStatus     @default(UPCOMING)
  authorId     String
  author       User               @relation(fields: [authorId], references: [id])
  attendees    LiveLinkAttendee[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())

  @@index([authorId])
  @@index([startDate])
}

model LiveLinkAttendee {
  id         String         @id @default(cuid())
  liveLinkId String
  liveLink   LiveLink       @relation(fields: [liveLinkId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  status     AttendeeStatus @default(PENDING)
  createdAt  DateTime       @default(now())

  @@unique([liveLinkId, userId])
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  text      String   @db.Text
  stars     Int      @default(5)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserConnection {
  id           String           @id @default(cuid())
  status       ConnectionStatus @default(PENDING)
  connector    User             @relation("Connector", fields: [connectorId], references: [id])
  connectorId  String
  connected    User             @relation("Connected", fields: [connectedId], references: [id])
  connectedId  String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([connectorId, connectedId])
  @@index([connectorId])
  @@index([connectedId])

}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum LiveLinkStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum AttendeeStatus {
  PENDING
  CONFIRMED
  DECLINED
}

model Chat {
  id        String    @id @default(cuid())
  userOne   User      @relation("UserOneChats", fields: [userOneId], references: [id])
  userOneId String
  userTwo   User      @relation("UserTwoChats", fields: [userTwoId], references: [id])
  userTwoId String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userOneId, userTwoId])
  @@index([userOneId])
  @@index([userTwoId])
}
model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  chatId      String
  chat        Chat     @relation(fields: [chatId], references: [id])
  senderId    String
  sender      User     @relation(fields: [senderId], references: [id])
  recipientId String
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  read        Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())

  @@index([chatId])
  @@index([senderId])
  @@index([recipientId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Transaction {
  id              String   @id @default(cuid())
  amount          Float
  currency        String   @default("USD")
  status          PaymentStatus
  reference       String   @unique
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}